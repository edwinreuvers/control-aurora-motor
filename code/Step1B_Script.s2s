' User inputs
var cf := 1.0; ' [Hz] cycle frequency of sinusoidal motor position
var amp := 1.5; ' [mm] motor position amplitude
var lmotorAvg := 0.0; ' [mm] motor offset position
var ncycles% := 5; ' number of cycles

var coef := 1.25; ' [mm/V] relation between motor position output in millimeters and motor position output in voltage (i.e. 1 V equals 1.25 mm)

' Initialize signal, time etc.
var nstep% := 1000; ' number of steps per second (i.e. dt = 1/nstep%)
var nsamp% := round(nstep%/cf); ' number of samples of our signal
var time[nsamp%], lmotor[nsamp%]; ' declare time and lmotor variable

' Make time signal
ArrConst(time[], 1.0/nstep%); time[0] := 0; ArrIntgl(time[]);

' Make motor length/position signal
var pi := Atan(1.0)*4;
var idx%;
for idx% := 0 to Len(lmotor[])-1 do 
    lmotor[idx%] := lmotorAvg+amp*Sin(cf*time[idx%]*2*pi+0.5*pi);
next;

' From motor position in millimeters to motor position in voltage
ArrDiv(lmotor,coef); ' From millimeters to voltage

' Get DACscale an adjust motor position amplitude if necessary
var n% := 1, response%;
U1401Open(n%);
U1401Write(Print$("GAIN,M, 1;"));
U1401Read(response%); ' Get the result
U1401Close();
DACscale := response%/1000;
ArrDiv(lmotor,DACscale/5); ' Adjust motor position amplitude

' Add to play waveform configuration
PlayWaveAdd("X", "SineWave", 0, nstep%, lmotor[]); '
PlayWaveCycles("X",ncycles%);

' Bring motor to start position
FileNew(0, 1); ' Open a new datafile
SampleStart(0); Start sampling
while SampleStatus() <> 2 do Yield() wend; ' Wait until samples has (really) started
var VPre := ChanValue(1,0);
SampleSeqVar(1, Vpre*Pow(2,32)/(2*5));
SampleSeqVar(2, lmotor[0]*Pow(2,32)/(2*5));
SampleKey("I");
Yield(abs(Vpre-lmotor[0])/0.2+1); ' Keep changing the motor position until we reach the starting position
SampleStop(); ' Stop sampling
FileClose(-1,-1);  ' Close the file and do not save it

' Open new datafile and start sampling!
FileNew(0, 1); ' Open new datafile
SampleStart(0); ' Start sampling
while SampleStatus() <> 2 do Yield() wend; ' Wait until samples has (really) started
SampleKey("X");
while PlayWaveStatus$() = "X" do Yield() wend; ' Wait until waveform has been played
SampleStop(); ' Stop sampling
FileSave();

