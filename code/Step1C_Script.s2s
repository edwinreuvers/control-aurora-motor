#include "Step1C_Script_Functions.s2s" ' Load functions

' User inputs
var cf := 1.0; ' [Hz] cycle frequency of sinusoidal motor position
var amp := 1.5; ' [mm] motor position amplitude
var lmotorAvg := 0.0; ' [mm] motor offset position
var ncycles% := 5; ' number of cycles

var coef := 1.25; ' [mm/V] relation between motor position output in millimeters and motor position output in voltage (i.e. 1 V equals 1.25 mm)

' Initialize signal, time etc.
var nstep% := 1000; ' number of steps per second (i.e. dt = 1/nstep%)
var nsamp% := round(nstep%/cf); ' number of samples of our signal
var time[nsamp%], lmotor[nsamp%]; ' declare time and lmotor variable

' Make time & motor position signal
ArrConst(time[], 1.0/nstep%); time[0] := 0; ArrIntgl(time[]);
MakeSineWave(lmotor[],time[],cf,amp,lmotorAvg);

' From motor position in millimeters to motor position in voltage
ArrDiv(lmotor,coef); ' From millimeters to voltage
CorrectSignal(lmotor); ' Correct motor position signal depending on range

' Add to play waveform configuration
PlayWaveAdd("X", "SineWave", 0, nstep%, lmotor[]); '
PlayWaveCycles("X",ncycles%);

' Open new datafile and start sampling!
BringToStartPosition(); ' Bring motor to starting position
FileNew(0, 1); ' Open new datafile
SampleStart(0); ' Start sampling
while SampleStatus() <> 2 do Yield() wend; ' Wait until samples has (really) started
SampleKey("X");
while PlayWaveStatus$() = "X" do Yield() wend; ' Wait until waveform has been played
SampleStop(); ' Stop sampling
FileSave();